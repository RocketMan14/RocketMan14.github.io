<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tony超的博客</title>
  
  <subtitle>你想拥有什么，你就去追求什么!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunjianchao.top/"/>
  <updated>2018-03-31T11:16:07.000Z</updated>
  <id>http://sunjianchao.top/</id>
  
  <author>
    <name>孙建超</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://sunjianchao.top/2018/03/31/git/git/"/>
    <id>http://sunjianchao.top/2018/03/31/git/git/</id>
    <published>2018-03-31T08:47:10.000Z</published>
    <updated>2018-03-31T11:16:07.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>#<center>Git 分支实践</center></p><blockquote><p>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。</p></blockquote><p>##命令行总结<br>高手都是直接用命令行，用命令行显得逼格更高。</p><p>####查看分支<br>查看本地所有分支：<br>git branch<br>查看远程所有分支：<br>$ git branch -r<br>列出所有本地分支和远程分支：<br>$ git branch -a</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;#&lt;center&gt;Git 分支实践&lt;/center&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>分享多张图片到微信朋友圈</title>
    <link href="http://sunjianchao.top/2018/03/11/android/share/"/>
    <id>http://sunjianchao.top/2018/03/11/android/share/</id>
    <published>2018-03-11T07:52:53.000Z</published>
    <updated>2018-03-16T05:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="分享核心代码"><a href="#分享核心代码" class="headerlink" title="分享核心代码"></a>分享核心代码</h3><pre><code>/** *content: 朋友圈的文字内容 *uris: 图片的集合 */private void shareToWX(Activity activity,String content, ArrayList&lt;Uri&gt; uris){    try {        Intent intent = new Intent();        ComponentName comp = new ComponentName(&quot;com.tencent.mm&quot;, &quot;com.tencent.mm.ui.tools.ShareToTimeLineUI&quot;);        intent.setComponent(comp);        intent.setAction(Intent.ACTION_SEND_MULTIPLE);        intent.setType(&quot;image/*&quot;);        intent.putExtra(&quot;Kdescription&quot;, content);        intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uris);        activity.startActivityForResult(intent, 10);    } catch (ActivityNotFoundException e) {        activity.runOnUiThread(new Runnable() {            @Override            public void run() {                Toast.makeText(activity, &quot;您还未安装微信&quot;, Toast.LENGTH_SHORT).show();            }        });    }}</code></pre><h3 id="7-0获取Uri代码"><a href="#7-0获取Uri代码" class="headerlink" title="7.0获取Uri代码"></a>7.0获取Uri代码</h3><pre><code>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) {    return FileProvider.getUriForFile(context, &quot;{你的包名}.fileprovider&quot;, file);} else {    return Uri.fromFile(file);}//备注：file : File 类型的对象 [也可在7.0以后的版本中获取Uri]  try {    return Uri.parse(android.provider.MediaStore.Images.Media.insertImage(context.getContentResolver(), file.getAbsolutePath(), file.getName(), null));} catch (FileNotFoundException e) {    e.printStackTrace();}</code></pre><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><pre><code>&lt;/application&gt;...&lt;providerandroid:name=&quot;android.support.v4.content.FileProvider&quot;android:authorities=&quot;{applicationId}.fileprovider&quot;android:exported=&quot;false&quot;android:grantUriPermissions=&quot;true&quot;&gt;&lt;meta-dataandroid:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;android:resource=&quot;@xml/file_provider_paths&quot; /&gt;&lt;/provider&gt;&lt;/application&gt;</code></pre><h3 id="file-provider-paths-xml-res目录下创建xml文件夹"><a href="#file-provider-paths-xml-res目录下创建xml文件夹" class="headerlink" title="file_provider_paths.xml (res目录下创建xml文件夹)"></a>file_provider_paths.xml (res目录下创建xml文件夹)</h3><pre><code>&lt;files-path&gt; 共享app内部的存储(等价于 Context.getFilesDir() 返回的内容)&lt;files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;&lt;cache-path&gt; 共享内部缓存目录(等价于 getCacheDir() 返回的内容)&lt;cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;&lt;external-path&gt; 共享外部的存储(等价于 Environment.getExternalStorageDirectory() 返回的内容)&lt;external-path name=&quot;name&quot; path=&quot;path&quot; /&gt;&lt;external-files-path&gt; 共享外部存储中与你的应用关联的目录(等于 Context.getExternalFilesDir(String) 或 Context.getExternalFilesDir(null) 返回的内容)&lt;external-files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;&lt;external-cache-path&gt; 共享外部存储中与你的应用关联的缓存目录(等价于 Context.getExternalCacheDir() 返回的内容)&lt;external-cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;        ##关于属性        name=&quot;name&quot;引号里的内容可以随便填，建议填有意义的内容。path=&quot;path&quot;path属性的值表示共享的具体路径。注意：path属性里指定的是路径，而不是某个特定文件。这里不能指定为一个文件，也不能用通配符指定为一组文件</code></pre><p>###授权<br>    //临时授权<br>    intent.setFlags(FLAG_GRANT_READ_URI_PERMISSION 或 FLAG_GRANT_WRITE_URI_PERMISSION);</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;分享核心代码&quot;&gt;&lt;a href=&quot;#分享核心代码&quot; class=&quot;headerlink&quot; title=&quot;分享核心代码&quot;&gt;&lt;/a&gt;分享核心代码&lt;/h3&gt;&lt;pre&gt;&lt;c
      
    
    </summary>
    
      <category term="android" scheme="http://sunjianchao.top/categories/android/"/>
    
    
      <category term="share" scheme="http://sunjianchao.top/tags/share/"/>
    
  </entry>
  
</feed>

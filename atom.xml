<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tony超的博客</title>
  
  <subtitle>你想拥有什么，你就去追求什么!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunjianchao.top/"/>
  <updated>2018-04-01T03:35:41.000Z</updated>
  <id>http://sunjianchao.top/</id>
  
  <author>
    <name>孙建超</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;font size=&quot;5&quot;&gt;git 命令行常用命令&lt;/font&gt;</title>
    <link href="http://sunjianchao.top/2018/03/31/git/git/"/>
    <id>http://sunjianchao.top/2018/03/31/git/git/</id>
    <published>2018-03-31T12:32:53.000Z</published>
    <updated>2018-04-01T03:35:41.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote><p>git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。公司目前的代码管理用的是git,自己简单总结了下git常用的命令。</p></blockquote><h3 id="命令行总结"><a href="#命令行总结" class="headerlink" title="命令行总结"></a>命令行总结</h3><p>高手都是直接用命令行，用命令行显得逼格更高。</p><p>&lt; !–more–&gt;</p><h4 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h4><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p><pre><code>git config --global user.name &quot;xxxx&quot; #用户名git config --global user.email &quot;xxxx@xxx.com&quot; #邮箱</code></pre><h4 id="检出仓库"><a href="#检出仓库" class="headerlink" title="检出仓库"></a>检出仓库</h4><pre><code>git clone git://github.com/jquery/git_learn.git</code></pre><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><p>查看本地所有分支</p><pre><code>git branch</code></pre><p>查看远程所有分支</p><pre><code>git branch -r</code></pre><p>列出所有本地分支和远程分支</p><pre><code>git branch -a</code></pre><h4 id="创建本地-dev-分支"><a href="#创建本地-dev-分支" class="headerlink" title="创建本地 dev 分支"></a>创建本地 dev 分支</h4><pre><code>git checkout -b dev</code></pre><p>创建新分支dev并立即切换到新分支，相当于以下两条命令：</p><pre><code>git branch devgit checkout devgit checkout -b local-branchname origin/remote_branchname  </code></pre><p>  就可以将远程分支映射到本地命名为local-branchname 的一分支,如：<br>想从远程分支 dev （远程有该分支）创建本地分支 dev1：</p><pre><code>git checkout -b dev1 origin/dev</code></pre><h4 id="开发提交"><a href="#开发提交" class="headerlink" title="开发提交"></a>开发提交</h4><p>add 文件</p><pre><code>git add README.md</code></pre><p>添加所有修改的文件</p><pre><code>git add .</code></pre><p>commit 本地提交</p><pre><code>git commit -m &quot;修改的内容&quot;</code></pre><p>将文件给推到服务器上</p><pre><code>git push -u origin master  </code></pre><h4 id="合并到本地-master-分支"><a href="#合并到本地-master-分支" class="headerlink" title="合并到本地 master 分支"></a>合并到本地 master 分支</h4><p>合并到本地 master 分支<br>分支 dev 开发工作完成，我们就可以切换回本地 master 分支</p><pre><code>git checkout master</code></pre><p>进行本地分支 dev 合并</p><pre><code>git merge dev</code></pre><h4 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h4><pre><code>git branch -d dev</code></pre><p>-d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</p><pre><code>git branch -D dev</code></pre><h4 id="创建远程分支-dev"><a href="#创建远程分支-dev" class="headerlink" title="创建远程分支 dev"></a>创建远程分支 dev</h4><p>直接提交</p><pre><code>git push origin master:dev</code></pre><p>这里冒号可以提交到指定分支，上面命令，把提交本地 master 分支到远程的 dev 分支，远程没有dev这个分支，会创建。</p><pre><code>git push origin master</code></pre><p>这是本地 master 提交到远程主分支 master，相当于：</p><pre><code>git push origin master:master</code></pre><h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><pre><code>git push origin --delete dev</code></pre><p>或者</p><pre><code>git push origin :dev</code></pre><p>远程分支 dev 将被删除。</p><h4 id="删除一个文件"><a href="#删除一个文件" class="headerlink" title="删除一个文件"></a>删除一个文件</h4><pre><code>git rm [file name] </code></pre><h4 id="回到具体的版本"><a href="#回到具体的版本" class="headerlink" title="回到具体的版本"></a>回到具体的版本</h4><pre><code>git reflog 查看命令历史，以便回到具体的版本git reset --hard HEAD^ </code></pre><h4 id="git-pull-和-git-fetch-的区别"><a href="#git-pull-和-git-fetch-的区别" class="headerlink" title="git pull 和 git fetch 的区别"></a>git pull 和 git fetch 的区别</h4><pre><code>git pull 本地与服务器端同步git fetch 相当于是从远程获取最新版本到本地，不会自动merge如：git fetch origin master(更新分支，未何并)git merge master</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="常用-Git-命令清单"><a href="#常用-Git-命令清单" class="headerlink" title="常用 Git 命令清单"></a><a href="http://http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用 Git 命令清单</a></h4><h4 id="Git分支管理策略"><a href="#Git分支管理策略" class="headerlink" title="Git分支管理策略"></a><a href="http://http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">Git分支管理策略</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。公司目前的代码管理用的是git,自己简单总结了下git常用的命令。&lt;/p
      
    
    </summary>
    
      <category term="git" scheme="http://sunjianchao.top/categories/git/"/>
    
    
      <category term="git" scheme="http://sunjianchao.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>分享多张图片到微信朋友圈</title>
    <link href="http://sunjianchao.top/2018/03/11/android/share/"/>
    <id>http://sunjianchao.top/2018/03/11/android/share/</id>
    <published>2018-03-11T07:52:53.000Z</published>
    <updated>2018-04-01T02:34:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="分享核心代码"><a href="#分享核心代码" class="headerlink" title="分享核心代码"></a>分享核心代码</h3><pre><code>/** *content: 朋友圈的文字内容 *uris: 图片的集合 */private void shareToWX(Activity activity,String content, ArrayList&lt;Uri&gt; uris){    try {        Intent intent = new Intent();        ComponentName comp = new ComponentName(&quot;com.tencent.mm&quot;, &quot;com.tencent.mm.ui.tools.ShareToTimeLineUI&quot;);        intent.setComponent(comp);        intent.setAction(Intent.ACTION_SEND_MULTIPLE);        intent.setType(&quot;image/*&quot;);        intent.putExtra(&quot;Kdescription&quot;, content);        intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uris);        activity.startActivityForResult(intent, 10);    } catch (ActivityNotFoundException e) {        activity.runOnUiThread(new Runnable() {            @Override            public void run() {                Toast.makeText(activity, &quot;您还未安装微信&quot;, Toast.LENGTH_SHORT).show();            }        });    }}</code></pre><h3 id="7-0获取Uri代码"><a href="#7-0获取Uri代码" class="headerlink" title="7.0获取Uri代码"></a>7.0获取Uri代码</h3><pre><code>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) {    return FileProvider.getUriForFile(context, &quot;{你的包名}.fileprovider&quot;, file);} else {    return Uri.fromFile(file);}//备注：file : File 类型的对象 [也可在7.0以后的版本中获取Uri]  try {    return Uri.parse(android.provider.MediaStore.Images.Media.insertImage(context.getContentResolver(), file.getAbsolutePath(), file.getName(), null));} catch (FileNotFoundException e) {    e.printStackTrace();}</code></pre><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><pre><code>&lt;/application&gt;...&lt;providerandroid:name=&quot;android.support.v4.content.FileProvider&quot;android:authorities=&quot;{applicationId}.fileprovider&quot;android:exported=&quot;false&quot;android:grantUriPermissions=&quot;true&quot;&gt;&lt;meta-dataandroid:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;android:resource=&quot;@xml/file_provider_paths&quot; /&gt;&lt;/provider&gt;&lt;/application&gt;</code></pre><h3 id="file-provider-paths-xml-res目录下创建xml文件夹"><a href="#file-provider-paths-xml-res目录下创建xml文件夹" class="headerlink" title="file_provider_paths.xml (res目录下创建xml文件夹)"></a>file_provider_paths.xml (res目录下创建xml文件夹)</h3><pre><code>&lt;files-path&gt; 共享app内部的存储(等价于 Context.getFilesDir() 返回的内容)&lt;files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;&lt;cache-path&gt; 共享内部缓存目录(等价于 getCacheDir() 返回的内容)&lt;cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;&lt;external-path&gt; 共享外部的存储(等价于 Environment.getExternalStorageDirectory() 返回的内容)&lt;external-path name=&quot;name&quot; path=&quot;path&quot; /&gt;&lt;external-files-path&gt; 共享外部存储中与你的应用关联的目录(等于 Context.getExternalFilesDir(String) 或 Context.getExternalFilesDir(null) 返回的内容)&lt;external-files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;&lt;external-cache-path&gt; 共享外部存储中与你的应用关联的缓存目录(等价于 Context.getExternalCacheDir() 返回的内容)&lt;external-cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;        ##关于属性        name=&quot;name&quot;引号里的内容可以随便填，建议填有意义的内容。path=&quot;path&quot;path属性的值表示共享的具体路径。注意：path属性里指定的是路径，而不是某个特定文件。这里不能指定为一个文件，也不能用通配符指定为一组文件</code></pre><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><pre><code>//临时授权intent.setFlags(FLAG_GRANT_READ_URI_PERMISSION 或 FLAG_GRANT_WRITE_URI_PERMISSION);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;分享核心代码&quot;&gt;&lt;a href=&quot;#分享核心代码&quot; class=&quot;headerlink&quot; title=&quot;分享核心代码&quot;&gt;&lt;/a&gt;分享核心代码&lt;/h3&gt;&lt;pre&gt;&lt;c
      
    
    </summary>
    
      <category term="android" scheme="http://sunjianchao.top/categories/android/"/>
    
    
      <category term="share" scheme="http://sunjianchao.top/tags/share/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git 命令行常用命令]]></title>
    <url>%2F2018%2F03%2F31%2Fgit%2Fgit%2F</url>
    <content type="text"><![CDATA[git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。公司目前的代码管理用的是git,自己简单总结了下git常用的命令。 命令行总结高手都是直接用命令行，用命令行显得逼格更高。 用户信息第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录： git config --global user.name &quot;xxxx&quot; #用户名 git config --global user.email &quot;xxxx@xxx.com&quot; #邮箱 检出仓库git clone git://github.com/jquery/git_learn.git 查看分支查看本地所有分支 git branch 查看远程所有分支 git branch -r 列出所有本地分支和远程分支 git branch -a 创建本地 dev 分支git checkout -b dev 创建新分支dev并立即切换到新分支，相当于以下两条命令： git branch dev git checkout dev git checkout -b local-branchname origin/remote_branchname 就可以将远程分支映射到本地命名为local-branchname 的一分支,如：想从远程分支 dev （远程有该分支）创建本地分支 dev1： git checkout -b dev1 origin/dev 开发提交add 文件 git add README.md 添加所有修改的文件 git add . commit 本地提交 git commit -m &quot;修改的内容&quot; 将文件给推到服务器上 git push -u origin master 合并到本地 master 分支合并到本地 master 分支分支 dev 开发工作完成，我们就可以切换回本地 master 分支 git checkout master 进行本地分支 dev 合并 git merge dev 删除本地分支git branch -d dev -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项 git branch -D dev 创建远程分支 dev直接提交 git push origin master:dev 这里冒号可以提交到指定分支，上面命令，把提交本地 master 分支到远程的 dev 分支，远程没有dev这个分支，会创建。 git push origin master 这是本地 master 提交到远程主分支 master，相当于： git push origin master:master 删除远程分支git push origin --delete dev 或者 git push origin :dev 远程分支 dev 将被删除。 删除一个文件git rm [file name] 回到具体的版本git reflog 查看命令历史，以便回到具体的版本 git reset --hard HEAD^ git pull 和 git fetch 的区别git pull 本地与服务器端同步 git fetch 相当于是从远程获取最新版本到本地，不会自动merge 如：git fetch origin master(更新分支，未何并) git merge master]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分享多张图片到微信朋友圈]]></title>
    <url>%2F2018%2F03%2F11%2Fandroid%2Fshare%2F</url>
    <content type="text"><![CDATA[分享核心代码/** *content: 朋友圈的文字内容 *uris: 图片的集合 */ private void shareToWX(Activity activity,String content, ArrayList&lt;Uri&gt; uris){ try { Intent intent = new Intent(); ComponentName comp = new ComponentName(&quot;com.tencent.mm&quot;, &quot;com.tencent.mm.ui.tools.ShareToTimeLineUI&quot;); intent.setComponent(comp); intent.setAction(Intent.ACTION_SEND_MULTIPLE); intent.setType(&quot;image/*&quot;); intent.putExtra(&quot;Kdescription&quot;, content); intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uris); activity.startActivityForResult(intent, 10); } catch (ActivityNotFoundException e) { activity.runOnUiThread(new Runnable() { @Override public void run() { Toast.makeText(activity, &quot;您还未安装微信&quot;, Toast.LENGTH_SHORT).show(); } }); } } 7.0获取Uri代码if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) { return FileProvider.getUriForFile(context, &quot;{你的包名}.fileprovider&quot;, file); } else { return Uri.fromFile(file); } //备注：file : File 类型的对象 [也可在7.0以后的版本中获取Uri] try { return Uri.parse(android.provider.MediaStore.Images.Media.insertImage(context.getContentResolver(), file.getAbsolutePath(), file.getName(), null)); } catch (FileNotFoundException e) { e.printStackTrace(); } AndroidManifest.xml&lt;/application&gt; ... &lt;provider android:name=&quot;android.support.v4.content.FileProvider&quot; android:authorities=&quot;{applicationId}.fileprovider&quot; android:exported=&quot;false&quot; android:grantUriPermissions=&quot;true&quot;&gt; &lt;meta-data android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot; android:resource=&quot;@xml/file_provider_paths&quot; /&gt; &lt;/provider&gt; &lt;/application&gt; file_provider_paths.xml (res目录下创建xml文件夹)&lt;files-path&gt; 共享app内部的存储(等价于 Context.getFilesDir() 返回的内容) &lt;files-path name=&quot;name&quot; path=&quot;path&quot; /&gt; &lt;cache-path&gt; 共享内部缓存目录(等价于 getCacheDir() 返回的内容) &lt;cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt; &lt;external-path&gt; 共享外部的存储(等价于 Environment.getExternalStorageDirectory() 返回的内容) &lt;external-path name=&quot;name&quot; path=&quot;path&quot; /&gt; &lt;external-files-path&gt; 共享外部存储中与你的应用关联的目录(等于 Context.getExternalFilesDir(String) 或 Context.getExternalFilesDir(null) 返回的内容) &lt;external-files-path name=&quot;name&quot; path=&quot;path&quot; /&gt; &lt;external-cache-path&gt; 共享外部存储中与你的应用关联的缓存目录(等价于 Context.getExternalCacheDir() 返回的内容) &lt;external-cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt; ##关于属性 name=&quot;name&quot; 引号里的内容可以随便填，建议填有意义的内容。 path=&quot;path&quot; path属性的值表示共享的具体路径。注意：path属性里指定的是路径，而不是某个特定文件。这里不能指定为一个文件，也不能用通配符指定为一组文件 授权//临时授权 intent.setFlags(FLAG_GRANT_READ_URI_PERMISSION 或 FLAG_GRANT_WRITE_URI_PERMISSION);]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>share</tag>
      </tags>
  </entry>
</search>

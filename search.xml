<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2018%2F03%2F31%2Fgit%2Fgit%2F</url>
    <content type="text"><![CDATA[#Git 分支实践 不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。 ##命令行总结高手都是直接用命令行，用命令行显得逼格更高。 ####查看分支查看本地所有分支：git branch查看远程所有分支：$ git branch -r列出所有本地分支和远程分支：$ git branch -a]]></content>
  </entry>
  <entry>
    <title><![CDATA[分享多张图片到微信朋友圈]]></title>
    <url>%2F2018%2F03%2F11%2Fandroid%2Fshare%2F</url>
    <content type="text"><![CDATA[分享核心代码/** *content: 朋友圈的文字内容 *uris: 图片的集合 */ private void shareToWX(Activity activity,String content, ArrayList&lt;Uri&gt; uris){ try { Intent intent = new Intent(); ComponentName comp = new ComponentName(&quot;com.tencent.mm&quot;, &quot;com.tencent.mm.ui.tools.ShareToTimeLineUI&quot;); intent.setComponent(comp); intent.setAction(Intent.ACTION_SEND_MULTIPLE); intent.setType(&quot;image/*&quot;); intent.putExtra(&quot;Kdescription&quot;, content); intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uris); activity.startActivityForResult(intent, 10); } catch (ActivityNotFoundException e) { activity.runOnUiThread(new Runnable() { @Override public void run() { Toast.makeText(activity, &quot;您还未安装微信&quot;, Toast.LENGTH_SHORT).show(); } }); } } 7.0获取Uri代码if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) { return FileProvider.getUriForFile(context, &quot;{你的包名}.fileprovider&quot;, file); } else { return Uri.fromFile(file); } //备注：file : File 类型的对象 [也可在7.0以后的版本中获取Uri] try { return Uri.parse(android.provider.MediaStore.Images.Media.insertImage(context.getContentResolver(), file.getAbsolutePath(), file.getName(), null)); } catch (FileNotFoundException e) { e.printStackTrace(); } AndroidManifest.xml&lt;/application&gt; ... &lt;provider android:name=&quot;android.support.v4.content.FileProvider&quot; android:authorities=&quot;{applicationId}.fileprovider&quot; android:exported=&quot;false&quot; android:grantUriPermissions=&quot;true&quot;&gt; &lt;meta-data android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot; android:resource=&quot;@xml/file_provider_paths&quot; /&gt; &lt;/provider&gt; &lt;/application&gt; file_provider_paths.xml (res目录下创建xml文件夹)&lt;files-path&gt; 共享app内部的存储(等价于 Context.getFilesDir() 返回的内容) &lt;files-path name=&quot;name&quot; path=&quot;path&quot; /&gt; &lt;cache-path&gt; 共享内部缓存目录(等价于 getCacheDir() 返回的内容) &lt;cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt; &lt;external-path&gt; 共享外部的存储(等价于 Environment.getExternalStorageDirectory() 返回的内容) &lt;external-path name=&quot;name&quot; path=&quot;path&quot; /&gt; &lt;external-files-path&gt; 共享外部存储中与你的应用关联的目录(等于 Context.getExternalFilesDir(String) 或 Context.getExternalFilesDir(null) 返回的内容) &lt;external-files-path name=&quot;name&quot; path=&quot;path&quot; /&gt; &lt;external-cache-path&gt; 共享外部存储中与你的应用关联的缓存目录(等价于 Context.getExternalCacheDir() 返回的内容) &lt;external-cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt; ##关于属性 name=&quot;name&quot; 引号里的内容可以随便填，建议填有意义的内容。 path=&quot;path&quot; path属性的值表示共享的具体路径。注意：path属性里指定的是路径，而不是某个特定文件。这里不能指定为一个文件，也不能用通配符指定为一组文件 ###授权 //临时授权 intent.setFlags(FLAG_GRANT_READ_URI_PERMISSION 或 FLAG_GRANT_WRITE_URI_PERMISSION);]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>share</tag>
      </tags>
  </entry>
</search>

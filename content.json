{"meta":{"title":"Tony超的博客","subtitle":"你想拥有什么，你就去追求什么!","description":null,"author":"孙建超","url":"http://sunjianchao.top"},"pages":[{"title":"","date":"2018-03-07T09:42:12.000Z","updated":"2018-03-11T04:08:08.000Z","comments":true,"path":"tags/index.html","permalink":"http://sunjianchao.top/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-03-07T09:43:31.000Z","updated":"2018-03-07T09:44:08.000Z","comments":true,"path":"categories/index.html","permalink":"http://sunjianchao.top/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2018-03-07T09:45:04.000Z","updated":"2018-03-11T04:45:00.000Z","comments":true,"path":"about/index.html","permalink":"http://sunjianchao.top/about/index.html","excerpt":"","text":"我，一个北漂的程序猿，坚信越努力，越幸运，欢迎分享知识。 QQ：1020377136 微信：15210810313 Email: 1020377136@qq.com 声明：本博客文章只是为了个人学习以及在一些技术型社区发表，不做商业使用，其中可能会有引用到其他文章经典的部分，本人大部分都会加上引用或者在文章底部的参考文献中注明，如果不慎引用了你的文章但是却没有注明的请联系我，谢谢！"}],"posts":[{"title":"","slug":"git/git","date":"2018-03-31T08:47:10.000Z","updated":"2018-03-31T12:33:39.000Z","comments":true,"path":"2018/03/31/git/git/","link":"","permalink":"http://sunjianchao.top/2018/03/31/git/git/","excerpt":"","text":"title: git 命令行常用命令 date: 2018-03-31 20:32:53tags: [git]category: git Git 分支实践 公司目前的代码管理用的是git,自己简单总结了下git常用的命令。 ##命令行总结高手都是直接用命令行，用命令行显得逼格更高。 ####用户信息第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录： git config –global user.name “xxxx” #用户名git config –global user.email “xxxx@xxx.com“ #邮箱 ####检出仓库git clone git://github.com/jquery/git_learn.git ####查看分支查看本地所有分支：git branch 查看远程所有分支：git branch -r 列出所有本地分支和远程分支：git branch -a ####创建本地 dev 分支git checkout -b dev创建新分支dev并立即切换到新分支，相当于以下两条命令：git branch devgit checkout dev git checkout -b local-branchname origin/remote_branchname 就可以将远程分支映射到本地命名为local-branchname 的一分支,如：想从远程分支 dev （远程有该分支）创建本地分支 dev1：git checkout -b dev1 origin/dev ####开发提交add 文件git add README.md 添加所有修改的文件git add . commit 本地提交git commit -m “修改的内容” git push -u origin master将文件给推到服务器上 ####合并到本地 master 分支合并到本地 master 分支分支 dev 开发工作完成，我们就可以切换回本地 master 分支：git checkout master进行本地分支 dev 合并：git merge dev ####删除本地分支git branch -d dev-d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项git branch -D dev ####创建远程分支 dev直接提交git push origin master:dev这里冒号可以提交到指定分支，上面命令，把提交本地 master 分支到远程的 dev 分支，远程没有dev这个分支，会创建。 git push origin master这是本地 master 提交到远程主分支 master，相当于：git push origin master:master ####删除远程分支git push origin –delete dev或者git push origin :dev远程分支 dev 将被删除。 ####删除一个文件git rm [file name] ####回到具体的版本git reflog 查看命令历史，以便回到具体的版本git reset –hard HEAD^ ####git pull 和 git fetch 的区别git pull 本地与服务器端同步git fetch 相当于是从远程获取最新版本到本地，不会自动merge如：git fetch origin master(更新分支，未何并) git merge master","categories":[],"tags":[]},{"title":"分享多张图片到微信朋友圈","slug":"android/share","date":"2018-03-11T07:52:53.000Z","updated":"2018-03-16T05:23:36.000Z","comments":true,"path":"2018/03/11/android/share/","link":"","permalink":"http://sunjianchao.top/2018/03/11/android/share/","excerpt":"","text":"分享核心代码/** *content: 朋友圈的文字内容 *uris: 图片的集合 */ private void shareToWX(Activity activity,String content, ArrayList&lt;Uri&gt; uris){ try { Intent intent = new Intent(); ComponentName comp = new ComponentName(&quot;com.tencent.mm&quot;, &quot;com.tencent.mm.ui.tools.ShareToTimeLineUI&quot;); intent.setComponent(comp); intent.setAction(Intent.ACTION_SEND_MULTIPLE); intent.setType(&quot;image/*&quot;); intent.putExtra(&quot;Kdescription&quot;, content); intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uris); activity.startActivityForResult(intent, 10); } catch (ActivityNotFoundException e) { activity.runOnUiThread(new Runnable() { @Override public void run() { Toast.makeText(activity, &quot;您还未安装微信&quot;, Toast.LENGTH_SHORT).show(); } }); } } 7.0获取Uri代码if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) { return FileProvider.getUriForFile(context, &quot;{你的包名}.fileprovider&quot;, file); } else { return Uri.fromFile(file); } //备注：file : File 类型的对象 [也可在7.0以后的版本中获取Uri] try { return Uri.parse(android.provider.MediaStore.Images.Media.insertImage(context.getContentResolver(), file.getAbsolutePath(), file.getName(), null)); } catch (FileNotFoundException e) { e.printStackTrace(); } AndroidManifest.xml&lt;/application&gt; ... &lt;provider android:name=&quot;android.support.v4.content.FileProvider&quot; android:authorities=&quot;{applicationId}.fileprovider&quot; android:exported=&quot;false&quot; android:grantUriPermissions=&quot;true&quot;&gt; &lt;meta-data android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot; android:resource=&quot;@xml/file_provider_paths&quot; /&gt; &lt;/provider&gt; &lt;/application&gt; file_provider_paths.xml (res目录下创建xml文件夹)&lt;files-path&gt; 共享app内部的存储(等价于 Context.getFilesDir() 返回的内容) &lt;files-path name=&quot;name&quot; path=&quot;path&quot; /&gt; &lt;cache-path&gt; 共享内部缓存目录(等价于 getCacheDir() 返回的内容) &lt;cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt; &lt;external-path&gt; 共享外部的存储(等价于 Environment.getExternalStorageDirectory() 返回的内容) &lt;external-path name=&quot;name&quot; path=&quot;path&quot; /&gt; &lt;external-files-path&gt; 共享外部存储中与你的应用关联的目录(等于 Context.getExternalFilesDir(String) 或 Context.getExternalFilesDir(null) 返回的内容) &lt;external-files-path name=&quot;name&quot; path=&quot;path&quot; /&gt; &lt;external-cache-path&gt; 共享外部存储中与你的应用关联的缓存目录(等价于 Context.getExternalCacheDir() 返回的内容) &lt;external-cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt; ##关于属性 name=&quot;name&quot; 引号里的内容可以随便填，建议填有意义的内容。 path=&quot;path&quot; path属性的值表示共享的具体路径。注意：path属性里指定的是路径，而不是某个特定文件。这里不能指定为一个文件，也不能用通配符指定为一组文件 ###授权 //临时授权 intent.setFlags(FLAG_GRANT_READ_URI_PERMISSION 或 FLAG_GRANT_WRITE_URI_PERMISSION);","categories":[{"name":"android","slug":"android","permalink":"http://sunjianchao.top/categories/android/"}],"tags":[{"name":"share","slug":"share","permalink":"http://sunjianchao.top/tags/share/"}]}]}